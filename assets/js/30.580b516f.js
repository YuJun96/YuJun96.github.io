(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{200:function(s,a,e){"use strict";e.r(a);var n=e(0),t=Object(n.a)({},function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"webpack学习心得"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack学习心得","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("center",[e("a",{attrs:{href:"https://webpack.github.io",target:"_blank",rel:"noopener noreferrer"}},[s._v("webpack"),e("OutboundLink")],1),s._v("学习心得 ")])],1),s._v(" "),e("h2",{attrs:{id:"webpack-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-是什么","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark1"}}),s._v(" webpack 是什么")]),s._v(" "),e("p",[s._v("  webpack 是一个模块打包工具，在开发中，各种各样的资源都可以认为是一种独特的模块资源，比如 css，js，png，json 等。而我们通过 webpack，可以将这些资源打包压缩在指定的文件中，需要注意的是，webpack 本身是支持 js 资源的，但我们可以通过 loader 加载器，来打包除了 js 之外的资源。")]),s._v(" "),e("h2",{attrs:{id:"为什么要学习-webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习-webpack","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark2"}}),s._v("为什么要学习 webpack")]),s._v(" "),e("p",[s._v("  随着大前端的来临，传统的 MVC 架构中的前端只是一个会做交互和静态页的切图仔，但随着 WEB 架构的变迁，出于项目日益复杂和业务扩展，MV*架构逐渐占领了 WEB 的光环，其中三大剑客便是 Angular,React 和 Vue，在使用这些 js 框架开始时，出于代码可维护性的角度出发，不会再像以往那样使用标签引入的方式，而是采用了一种模块的方式去开发，webpack 是其中典型的代表。")]),s._v(" "),e("h2",{attrs:{id:"搭建开发环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#搭建开发环境","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark3"}}),s._v("搭建开发环境")]),s._v(" "),e("blockquote",[e("p",[s._v("1.安装"),e("a",{attrs:{href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"}},[s._v("node"),e("OutboundLink")],1),s._v(" 在 window 的搜索框输入 cmd，输入如下命令，node -V npm -V 出现版本号就代表 node 安装成功。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("node -v\n8.2.1\nnpm -v\n6.2.1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("blockquote",[e("p",[s._v("2.全局安装 webpack "),e("font",{attrs:{color:"red"}},[s._v("(建议不要全局安装，避免与后面项目中 webpack 的版本产生冲突)")])],1)]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm install webpack -g\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("webpack -v\n3.6.0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("blockquote",[e("p",[s._v("3.创建一个文件夹,建立两个目录 dist、src 接着"),e("code",[s._v("npm init -y")]),s._v("初始化项目")])]),s._v(" "),e("blockquote",[e("p",[s._v("4.安装 webpack  "),e("code",[s._v("npm install webpack -D")]),s._v("将插件装到开发环境。")])]),s._v(" "),e("h2",{attrs:{id:"进入-demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进入-demo","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark4"}}),s._v("进入 demo")]),s._v(" "),e("blockquote",[e("p",[s._v("1.在 src 下创建一个 entry.js,dist 目录下创建一个 index.html 文件 2.在 src 下建立一个 entry.js 文件\n3`在根目录下创建一个 webpack.config.js 的文件")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("module.exports = {\n  // 入口文件设置\n  entry:{},\n  // 出口文件设置\n  output:{},\n  // 用来处理css，img等模块\n  module:{},\n  // 一些第三方的插件\n  plugins:[],\n  //配置webpack开发服务功能\n  devServer:{}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("ul",[e("li",[s._v("entry：配置入口文件的地址，可以是单一入口，也可以是多入口。")]),s._v(" "),e("li",[s._v("output：配置出口文件的地址，在 webpack2.X 版本后，支持多出口配置。")]),s._v(" "),e("li",[s._v("module：配置模块，主要是解析 CSS 和图片转换压缩等功能。")]),s._v(" "),e("li",[s._v("plugins：配置插件,根据你的需要配置不同功能的插件。")]),s._v(" "),e("li",[s._v("devServer：配置开发服务功能。")])]),s._v(" "),e("h3",{attrs:{id:"entry-选项-入口配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entry-选项-入口配置","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark4-1"}}),s._v("entry 选项(入口配置)")]),s._v(" "),e("p",[s._v("  这个选项就是配置我们要压缩的文件一般是 JavaScript 文件（当然也可以是 CSS…..）。按照上节课的代码(如果你上节课的代码还没作，那你可以返回去重新作一下)，这里要填写的是 src 目录下的 entery.js 文件。")]),s._v(" "),e("blockquote",[e("p",[s._v("wepback.config.js 中的 entry 选项")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" //入口文件的配置项\nentry:{\n  //里面的main是可以随便写的\n    main:'./src/main.js'\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"output-选项-出口配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-选项-出口配置","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark4-2"}}),s._v("output 选项(出口配置)")]),s._v(" "),e("p",[s._v("  出口配置是用来告诉 webpack 最后打包文件的地址和文件名称的。按照上节课的操作，应该打包到 dist 目录下。在编写出口文件时，我们需要用到一点 Node 的知识，如果你还不会 Node 也没有 关系，就简单的两句代码，你记住就可以了")]),s._v(" "),e("blockquote",[e("p",[s._v("wepback.config.js 中的 output 选项")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//出口文件的配置项\noutput:{\n    //打包的路径位置\n    path:path.resolve(__dirname,'dist'),\n    //打包的文件名称\n    filename:'bundle.js'\n},\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("\n  如果你只这样写，是会报错的：找不到path这个东西。所以我们要在webpack.config.js的头部引入path，代码如下：\n")]),s._v(" "),e("blockquote",[e("p",[s._v("01 const path= require('path')")])]),s._v(" "),e("p",[s._v("下面是 webpack 的配置文档")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const path = `require`('path');\nmodule.exports={\n    //入口文件的配置项\n    entry:{\n        entry:'./src/entry.js'\n    },\n    //出口文件的配置项\n    output:{\n        //输出的路径，用了Node语法\n        path:path.resolve(__dirname,'dist'),\n        //输出的文件名称\n        filename:'bundle.js'\n    },\n    //模块：例如解读CSS,图片如何转换，压缩\n    module:{},\n    //插件，用于生产模版和各项功能\n    plugins:[],\n    //配置webpack开发服务功能\n    devServer:{}\n}\n\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[s._v("在 dist/index.html 中引入 output 中 filename 这个 js，写完这个文件在命令行输入 webpack 就可以对文件进行打包。然后就可以在浏览器中看到 index.html 页面")]),s._v(" "),e("h3",{attrs:{id:"多入口多出口配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多入口多出口配置","aria-hidden":"true"}},[s._v("#")]),s._v(" 多入口多出口配置")]),s._v(" "),e("p",[s._v("Webpack在版本1的时候很难设置多出口文件，但是在2版本开始就变的很方便了。直接看多入口和多出口的文件配置，然后可以和单一出口对比一下，你会发现这种设置非常简单(只需改动两点配置就可以)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("module.exports={\n    entry:{\n        entry:'./src/entry.js'\n        entry1:'./src/entry1.js'\n    },\n    output:{\n        //输出的路径，用了Node语法\n        path:path.resolve(__dirname,'dist'),\n        //输出的文件名称\n        filename:'[name].js'\n    },\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("[name]的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。")]),s._v(" "),e("h2",{attrs:{id:"配置文件-服务和热更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置文件-服务和热更新","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark5"}}),s._v("配置文件:服务和热更新")]),s._v(" "),e("h3",{attrs:{id:"设置-webpack-dev-server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设置-webpack-dev-server","aria-hidden":"true"}},[s._v("#")]),s._v(" 设置 webpack-dev-server")]),s._v(" "),e("p",[s._v("要执行 webpack-dev-server 是要先用 npm install")]),s._v(" "),e("p",[s._v("webpack-dev-server –save-dev来进行下载的。下载好后，需要配置一下devServer。最简单的devServer配置项只有四个。先看一下代码，然后我再作解释。")]),s._v(" "),e("p",[s._v("webpack.config,js")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("devServer:{\n    //设置基本目录结构\n      contentBase:path.resolve(__dirname,\"dist\"),\n    //服务器的IP地址，可以使用127.0.0.1也可以使用localhost\n      host:'127.0.0.1'\n    //开启服务器压缩\n      compress:true,\n    //设置端口号\n      port:3000\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[s._v("contentBase:配置服务器基本运行路径，用于找到程序打包地址。")]),s._v(" "),e("li",[s._v("host：服务运行地址，建议使用本机 IP，这里为了讲解方便，所以用 localhost。")]),s._v(" "),e("li",[s._v("compress：服务器端压缩选型，一般设置为开启，如果你对服务器压缩感兴趣，可以自行学习。")]),s._v(" "),e("li",[s._v("port：服务运行端口，建议不使用 80，很容易被占用，这里使用了 3000.")])]),s._v(" "),e("p",[e("strong",[s._v("注意")]),s._v("：这里需要使用 npm 来进行安装 webpack-dev-server 了， 命令如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm i webpack-dev-server -D\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("配置好后，你可以试着在终端中输入webpack-dev-server,如果可以执行成功，但是往往提示下面的错误（或者是无法找到内部或外部命令）。\n出现下面的错误不用慌张，我们只要在package.json里配置一下scripts选项就可以执行了。")]),s._v(" "),e("p",[s._v("package.json")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\n"scripts": {\n    "server":"webpack-dev-server"\n },\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("配置好保存后，在终端里输入 npm run server 打开服务器。然后在浏览器地址栏输入http://localhost:3000就可以看到结果了。")]),s._v(" "),e("p",[s._v("支持热更新")]),s._v(" "),e("p",[s._v("在 npm run server 启动后，它是有一种监控机制的（也叫 watch）。它可以监控到我们修改源码，并立即在浏览器里给我们更新。")]),s._v(" "),e("p",[s._v("注意：这里只是我们的 webpack3.6 版本支持，在 3.5 版本时要支持热更新还需要一些其他的操作。因为已经有了成熟的 3.6 版本，我就不再介绍低版本的操作方法。还有一种情况。如果你都设置好了，但是不进行热更新，可能是你系统的问题，在 Linux 和 Ma 上支持良好，在 Windows 上有时会出现问题。")]),s._v(" "),e("h2",{attrs:{id:"模块-css-打包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块-css-打包","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark6"}}),s._v("模块:css 打包")]),s._v(" "),e("p",[s._v("Webpack 在生产环境中有一个重要的作用就是减少 http 的请求数，就是把多个文件打包到一个 js 里，这样请求数就可以减少好多。这节课我们就学习一个重要的知识，把我们的 CSS 文件打包。在学习 CSS 打包之前，需要先对 webpack.config.js 里的 Loaders 配置项进行了解。")]),s._v(" "),e("p",[e("strong",[s._v("Loaders")]),s._v("\nLoaders 是 Webpack 最重要的功能之一，他也是 Webpack 如此盛行的原因。通过使用不同的 Loader，Webpack 可以的脚本和工具，从而对不同的文件格式进行特定处理。")]),s._v(" "),e("p",[s._v("简单的举几个 Loaders 使用例子:")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("可以把 SASS 文件的写法转换成 CSS，而不在使用其他转换工具。")])]),s._v(" "),e("li",[e("p",[s._v("可以把 ES6 或者 ES7 的代码，转换成大多浏览器兼容的 JS 代码。")])]),s._v(" "),e("li",[e("p",[s._v("可以把 React 中的 JSX 转换成 JavaScript 代码。\n"),e("strong",[s._v("注意")]),s._v("：所有的 Loaders 都需要在 npm 中单独进行安装，并在 webpack.config.js 里进行配置。下面我们对 Loaders 的配置型简单梳理一下。")])]),s._v(" "),e("li",[e("p",[s._v("test：用于匹配处理文件的扩展名的表达式，这个选项是必须进行配置的；")])]),s._v(" "),e("li",[e("p",[s._v("use：loader 名称，就是你要使用模块的名称，这个选项也必须进行配置，否则报错；")])]),s._v(" "),e("li",[e("p",[s._v("include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；")])]),s._v(" "),e("li",[e("p",[s._v("query：为 loaders 提供额外的设置选项（可选）。\n明白了 Loader 是什么后，下面就开始，如何打包 CSS 文件")])])]),s._v(" "),e("h3",{attrs:{id:"打包-css-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打包-css-文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 打包 css 文件")]),s._v(" "),e("p",[s._v("要打包 CSS 你必须先要有个 CSS 文件，在/src 目录下，我们建立一个 css 文件夹，在文件夹里建立 index.css 文件。代码内容如下。\n./src/css/index.css")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nbody{\n    background-color: red;\n    color: white;\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("CSS 文件建立好后，需要引入到入口文件中，才可以打包到，这里我们引入到 entry.js 中。")]),s._v(" "),e("p",[s._v("/src/entery.js 中在首行加入代码：")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01")]),s._v(" import './css/index.css")])]),s._v(" "),e("p",[s._v("CSS 和引入做好后，我们就需要使用 loader 来解析 CSS 文件了，这里我们需要两个解析用的 loader，分别是 style-loader 和 css-loader。")]),s._v(" "),e("h3",{attrs:{id:"style-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#style-loader","aria-hidden":"true"}},[s._v("#")]),s._v(" style-loader")]),s._v(" "),e("p",[s._v("它是用来将 css 插入到页面的 style 标签。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v(" npm i style-loader -D")])]),s._v(" "),e("h3",{attrs:{id:"css-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-loader","aria-hidden":"true"}},[s._v("#")]),s._v(" css-loader")]),s._v(" "),e("p",[s._v("它是用来处理 css 文件中的 url()等")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v(" npm i css-loader -D")])]),s._v(" "),e("p",[s._v("两个 loader 都下载好后我们就可以安装 loader 了")]),s._v(" "),e("h3",{attrs:{id:"loaders-配置："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loaders-配置：","aria-hidden":"true"}},[s._v("#")]),s._v(" loaders 配置：")]),s._v(" "),e("p",[s._v("修改 webpack.config.js 中 module 属性中的配置代码如下：")]),s._v(" "),e("p",[s._v("webpack.config.js")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nmodule:{\n    rules:[\n        {\n            test:/\\.css$/,\n            use:[\n                {loader:'style-loader'},\n                {loader:'css-loader'}\n                ]\n        }\n    ]\n}\n注意:style-loader一定要放在css-loader的前面，不然会报错\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h2",{attrs:{id:"插件配置-html-文件的发布"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件配置-html-文件的发布","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark7"}}),s._v("插件配置:Html 文件的发布")]),s._v(" "),e("p",[s._v("现在我们的项目结构是有问题的，把 index.html 直接放到了 dist 文件夹下，这肯定是不正确的，应该放到 src 目录下。前期我为了循序渐进的学习，所以把 index.html 放到了 dist 目录下。这节课我们就学习如何把 html 文件打包到我们的生产路径下。")]),s._v(" "),e("h3",{attrs:{id:"打包-html-文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打包-html-文件","aria-hidden":"true"}},[s._v("#")]),s._v(" 打包 HTML 文件")]),s._v(" "),e("p",[s._v("我们先把 dist 中的 html 文件剪切到 src 目录中，并去掉我们的 JS 引入代码（webpack 会自动为我们引入 JS），因为这才是我们真实工作的目录文件结构。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v(":npm i html-webpack-plugin -D\n"),e("code",[s._v("02.")]),s._v(":在 webpack.config.js 中进行配置")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("01.在最前面引入\nconst htmlPlugin = require(\" html-webpack-plugin\")\n02.\nplugins:[\n    new htmlPlugin({\n        minifiy:{\n           removeAttributeQuotes: true   //将html进行压缩，去掉html中的逗号\n        },\n        hash:true,  //为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS\n        template: './src/index.html'   //打包的路径\n    })\n]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("ul",[e("li",[s._v("minify：是对 html 文件进行压缩，removeAttrubuteQuotes 是却掉属性的双引号")]),s._v(" "),e("li",[s._v("hash：为了开发中 js 有缓存效果，所以加入 hash，这样可以有效避免缓存 JS")]),s._v(" "),e("li",[s._v("template：是要打包的 html 模版路径和文件名称")])]),s._v(" "),e("p",[s._v("上边的都配置完成后，我们就可以在终端中使用 webpack，进行打包。你会看到 index.html 文件已经被打包到我们的 dist 目录下了，并且自动为我们引入了路口的 JS 文件。")]),s._v(" "),e("h2",{attrs:{id:"css-中图片的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-中图片的问题","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark8"}}),s._v(" css 中图片的问题")]),s._v(" "),e("h3",{attrs:{id:"图片写入-css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片写入-css","aria-hidden":"true"}},[s._v("#")]),s._v(" 图片写入 CSS")]),s._v(" "),e("p",[s._v("你可以先在网上找一个图片如果你需要下载，也可以下载（当然你可以完全自己找一个自己喜欢的）找到图片后在 src 目录下新建一个 images 文件夹，把图片放入 images 文件夹。")]),s._v(" "),e("p",[s._v("在 index.html 文件中增加一个放置 div 的标签（需要注意的是这里修改的是 src 下的 index.html 文件，不是 dist 下的，这点新手很容易弄混，要格外注意），代码如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('<div id="tupian"></div>\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("编写 css 文件，把你用的图片作为背景显示。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("#tupian{\n   background-image: url(../images/1.png);\n   width:466px;\n   height:453px;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("编写完成后，我们可以试着用 webpack 去打包一下。你会发现终端中是报错的.")]),s._v(" "),e("h3",{attrs:{id:"file-loader-url-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#file-loader-url-loader","aria-hidden":"true"}},[s._v("#")]),s._v(" file-loader url-loader")]),s._v(" "),e("p",[s._v("上面的错误是由于缺少 loader 的解析，对 loader 其实我们并不陌生，因为前边已经学习了 CSS 打包的 loader。我们先安装两个解析图片用的 loader。")]),s._v(" "),e("p",[s._v("安装 file-loader 和 url-loader")]),s._v(" "),e("blockquote",[e("p",[s._v("`01.npm i file-loader url-loader -D")])]),s._v(" "),e("p",[e("strong",[s._v("file-loader")]),s._v("：解决引用路径的问题，拿 background 样式用 url 引入背景图来说，我们都知道，webpack 最终会将各个模块打包成一个文件，因此我们样式中的 url 路径是相对入口 html 页面的，而不是相对于原始 css 文件所在的路径的。这就会导致图片引入失败。这个问题是用 file-loader 解决的，file-loader 可以解析项目中的 url 引入（不仅限于 css），根据我们的配置，将图片拷贝到相应的路径，再根据我们的配置，修改打包后文件引用路径，使之指向正确的文件。")]),s._v(" "),e("p",[e("strong",[s._v("url-loader")]),s._v("：如果图片较多，会发很多 http 请求，会降低页面性能。这个问题可以通过 url-loader 解决。url-loader 会将引入的图片编码，生成 dataURl。相当于把图片数据翻译成一串字符。再把这串字符打包到文件中，最终只需要引入这个文件就能访问图片了。当然，如果图片较大，编码会消耗性能。因此 url-loader 提供了一个 limit 参数，小于 limit 字节的文件会被转为 DataURl，大于 limit 的还会使用 file-loader 进行 copy。")]),s._v(" "),e("p",[s._v("配置 url-loader")]),s._v(" "),e("p",[s._v("我们安装好后，就可以使用这个 loader 了，记得在 loader 使用时不需要用 require 引入，在 plugins 才需要使用 require 引入。")]),s._v(" "),e("p",[s._v("webpack.config.js 文件")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("module:{\n    relus:{\n        test:/\\.(jpg|png|gif)$/,\n        use:[{\n            loader:url-loader,\n            options:{\n               limit: 500000   //决定是否将图片压缩为base64\n            }\n        }]\n    }\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("ul",[e("li",[s._v("test:/.(png|jpg|gif)/是匹配图片文件后缀名称。")]),s._v(" "),e("li",[s._v("use：是指定使用的 loader 和 loader 的配置参数。")]),s._v(" "),e("li",[s._v("limit：是把小于 500000B 的文件打成 Base64 的格式，写入 JS。\n写好后就可以使用 webpack 进行打包了，这回你会发现打包很顺利的完成了。具体的 Base64 的格式，你可以查看视频中的样子。")])]),s._v(" "),e("h3",{attrs:{id:"为什么只使用了-url-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么只使用了-url-loader","aria-hidden":"true"}},[s._v("#")]),s._v(" 为什么只使用了 url-loader")]),s._v(" "),e("p",[s._v("你会发现我们并没有在 webpack.config.js 中使用 file-loader，但是依然打包成功了。我们需要了解 file-loader 和 url-loader 的关系。url-loader 和 file-loader 是什么关系呢？简答地说，url-loader 封装了 file-loader。url-loader 不依赖于 file-loader，即使用 url-loader 时，只需要安装 url-loader 即可，不需要安装 file-loader，因为 url-loader 内置了 file-loader。通过上面的介绍，我们可以看到，url-loader 工作分两种情况：")]),s._v(" "),e("p",[s._v("1.文件大小小于 limit 参数，url-loader 将会把文件转为 DataURL（Base64 格式）；")]),s._v(" "),e("p",[s._v("2.文件大小大于 limit，url-loader 会调用 file-loader 进行处理，参数也会直接传给 file-loader。")]),s._v(" "),e("p",[s._v("也就是说，其实我们只安装一个 url-loader 就可以了。但是为了以后的操作方便，我们这里就顺便安装上 file-loader。")]),s._v(" "),e("h2",{attrs:{id:"css-分离与图片路径处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-分离与图片路径处","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark9"}}),s._v("CSS 分离与图片路径处")]),s._v(" "),e("h3",{attrs:{id:"css-分离-extract-text-webpack-plugin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-分离-extract-text-webpack-plugin","aria-hidden":"true"}},[s._v("#")]),s._v(" CSS 分离:extract-text-webpack-plugin")]),s._v(" "),e("p",[s._v("有些简单的交互页面中，JavasScript 页面代码会非常少，而大部分代码都在 CSS 中，这时候项目组长会要求把 CSS 单独提取出来，方便以后更改。遇到这个需求你不要惊慌，已经有大神为我们准备好了对象的插件（plugin）。")]),s._v(" "),e("p",[s._v("extract-text-webpack-plugin\n这个插件就可以完美的解决我们提取 CSS 的需求，但是 webpack 官方其实并不建议这样作，他们认为 CSS 就应该打包到 JavasScript 当中以减少 http 的请求数。但现实中的需求往往不是我们前端能控制的，有些需求是我们不能控制的，分离 CSS 就是这样一个既合理由不合理的需求。")]),s._v(" "),e("p",[e("strong",[s._v("安装")])]),s._v(" "),e("blockquote",[e("p",[s._v("`01.npm install --save-dev extract-text-webpack-plugin")])]),s._v(" "),e("p",[e("code",[s._v("02.")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("01.引入\nconst extraTextPlugin = require(\"extract-text-webpack-plugin\")\n02.在plugins中增加如下代码\nnew  extraTextPlugin('./css/index.css')\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这里的/css/index.css 是分离后的路径位置。这部配置完成后，包装代码：还要修改原来我们的 style-loader 和 css-loader。")]),s._v(" "),e("p",[s._v("修改代码如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('        rules: [\n            {\n              test: /\\.css$/,\n              use: extractTextPlugin.extract({\n                fallback: "style-loader",\n                use: "css-loader"\n              })\n            }]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("h3",{attrs:{id:"图片路径问题："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片路径问题：","aria-hidden":"true"}},[s._v("#")]),s._v(" 图片路径问题：")]),s._v(" "),e("p",[s._v("利用 extract-text-webpack-plugin 插件很轻松的就把 CSS 文件分离了出来，但是 CSS 路径并不正确，很多小伙伴就在这里搞个几天还是没有头绪，网上也给出了很多的解决方案，我觉的最好的解决方案是使用 publicPath 解决，我也一直在用。")]),s._v(" "),e("p",[s._v("publicPath：是在 webpack.config.js 文件的 output 选项中，主要作用就是处理静态文件路径的。")]),s._v(" "),e("p",[s._v("在处理前，我们在 webpack.config.js 上方声明一个对象，叫 website。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('\nvar website ={\n    publicPath:"http://127.0.0.1:3000/"\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("注意，这里的 IP 和端口，是你本机的 ip 或者是你 devServer 配置的 IP 和端口。")]),s._v(" "),e("p",[s._v("然后在 output 选项中引用这个对象的 publicPath 属性。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("//出口文件的配置项\n    output:{\n        //输出的路径，用了Node语法\n        path:path.resolve(__dirname,'dist'),\n        //输出的文件名称\n        filename:'[name].js',\n        publicPath:website.publicPath\n    },\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("配置完成后，你再使用 webpack 命令进行打包，你会发现原来的相对路径改为了绝对路径，这样来讲速度更快。")]),s._v(" "),e("h2",{attrs:{id:"处理-html-中的图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#处理-html-中的图片","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark10"}}),s._v(" 处理 html 中的图片")]),s._v(" "),e("p",[s._v("只有项目安装 webpack，如何打包？ 有的小伙伴在学习视频时，并没有全局安装 webpack，而是使用了项目安装。首先我要说的是，这种做法是 webpack 推崇的，webpack 并不鼓励全局安装 webpack。但是小伙伴直接在终端用 webpack 进行打包项目，他使用时会出现不是内部命令或者外部命令。")]),s._v(" "),e("p",[s._v("这时候需要配置 package.json 里的 scripts 选项，我们以前的课程已经学习了配置 webpack-dev-server 命令，在这个命令下面我们再加一个 build 命令进行打包项目使用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('"scripts": {\n    "server": "webpack-dev-server --open",\n    "build":"webpack"\n  }\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("配置完成后，可以在控制台输入 npm run build 进行打包。")]),s._v(" "),e("h3",{attrs:{id:"如何把图片放到指定的文件夹下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何把图片放到指定的文件夹下","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何把图片放到指定的文件夹下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n        test: /\\.(png|jpg|gif)$/,\n        use: [{\n          loader: 'url-loader',\n          options: {\n            limit: 5000,\n            outputPath: 'images/'   //将图片统一输出到image路径下\n          }\n        }]\n      }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h3",{attrs:{id:"如何解决图片打包问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何解决图片打包问题","aria-hidden":"true"}},[s._v("#")]),s._v(" 如何解决图片打包问题")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v("npm i html-withimg-loader --D\n"),e("code",[s._v("02.")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("rules:[\n    {\n       test: /\\.(htm|html)$/i,   //打包css中的图片问题\n        use: ['html-withimg-loader']\n    }\n]\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("然后在终端中可以进行打包了。你会发现 images 被很好的打包了。并且路径也完全正确。")]),s._v(" "),e("h2",{attrs:{id:"sass-文件的打包和分离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sass-文件的打包和分离","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark11"}}),s._v(" SASS 文件的打包和分离")]),s._v(" "),e("h3",{attrs:{id:"安装打包需要的-loader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装打包需要的-loader","aria-hidden":"true"}},[s._v("#")]),s._v(" 安装打包需要的 loader")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01")]),s._v(".npm i node-sass saa-loader -D")])]),s._v(" "),e("p",[s._v("node-sass：因为 sass-loader 依赖于 node-sass，所以需要先安装")]),s._v(" "),e("p",[s._v("编写 loader 配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('rules:[\n    {\n        test:/\\.scss/,\n     use: extractTextPlugin.extract({\n                use: [\n                    {\n                    loader: "css-loader"\n                    },\n                   {\n                    loader: "sass-loader"\n                   }\n                   ],\n                fallback: "style-loader"\n            })\n]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h2",{attrs:{id:"自动处理-css3-前缀属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动处理-css3-前缀属性","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark12"}}),s._v("自动处理 css3 前缀属性")]),s._v(" "),e("p",[s._v("SS3 已经成了前端的必会技能，但是你一定为那些属性需要加前缀，那些属性不需要加前缀而头疼。")]),s._v(" "),e("p",[s._v("为了浏览器的兼容性，有时候我们必须加入-webkit,-ms,-o,-moz 这些前缀。目的就是让我们写的页面在每个浏览器中都可以顺利运行。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v("安装两个插件 npm i postcss-loader autoprefixer -D")])]),s._v(" "),e("p",[s._v("postCSS 推荐在项目根目录（和 webpack.config.js 同级），建立一个 postcss.config.js 文件。")]),s._v(" "),e("p",[s._v("postcss.config.js")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("module.exports = {\n    plugins: [\n        require('autoprefixer')\n    ]\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("这就是对 postCSS 一个简单的配置，引入了 autoprefixer 插件。让 postCSS 拥有添加前缀的能力，它会来增加相应的 css3 属性前缀。")]),s._v(" "),e("p",[s._v("编写 loader")]),s._v(" "),e("p",[s._v("对 postcss.config.js 配置完成后，我们还需要编写我们的 loader 配置。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("{\n  test: /\\.css$/,\n  use: extractTextPlugin.extract({\n    fallback: 'style-loader',\n    use: [\n    { loader: 'css-loader', options: { importLoaders: 1 } },\n    'postcss-loader'\n    ]\n   })\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"消除未使用的-css"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#消除未使用的-css","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark13"}}),s._v("消除未使用的 CSS")]),s._v(" "),e("p",[s._v("在项目中有些 css 可能我们并未用到，因此需要消除那些没有被用到的 css")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v("安装两个包 npm i -D purifycss-webpack purify-css")])]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("02.")]),s._v("引入 glob")])]),s._v(" "),e("p",[s._v("因为我们需要同步检查 html 模板，所以我们需要引入 node 的 glob 对象使用。在 webpack.config.js 文件头部引入 glob。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const glob = require("glob")\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("blockquote",[e("ol",{attrs:{start:"3"}},[e("li",[s._v('const PurifyCSSPlugin = require("purifycss-webpack")')])])]),s._v(" "),e("blockquote",[e("ol",{attrs:{start:"4"}},[e("li",[s._v("配置 plugins")])])]),s._v(" "),e("p",[s._v("引入完成后我们需要在 webpack.config.js 里配置 plugins")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" new PurifyCSSPlugin({\n     //对html进行扫描\n      paths: glob.sync(path.join(__dirname, 'src/*.html')),\n      }),\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("这里配置了一个 paths，主要是需找 html 模板，purifycss 根据这个配置会遍历你的文件，查找哪些 css 被使用了。")]),s._v(" "),e("p",[e("strong",[s._v("注意")]),s._v("：使用这个插件必须配合 extract-text-webpack-plugin 这个插件，")]),s._v(" "),e("h2",{attrs:{id:"给-webpack-增加-babel-支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给-webpack-增加-babel-支持","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark14"}}),s._v("给 webpack 增加 babel 支持")]),s._v(" "),e("p",[s._v("现在前端开发中大量使用 es6 甚至 es7 的语法，而一些浏览器对其支持性不太好，因此我们需要将 es6，es7 编译成 es5，进行上线。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01")]),s._v("安装：npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react")])]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("02.")]),s._v("在 webpack.config.js 中的 module 中进行配置")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("rules：[{\n    test:/\\.(js|jsx)$/,\n      use:{\n        loader:'babel-loader'\n        },\n     exclude:/node_modules/\n}]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("blockquote",[e("p",[e("code",[s._v("03.")]),s._v("在项目根目录新建.babelrc 文件，并把配置写到文件里")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "presets": [\n    "es2015",\n    "react"\n  ]\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"env："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#env：","aria-hidden":"true"}},[s._v("#")]),s._v(" ENV：")]),s._v(" "),e("p",[s._v("现在网络上已经不流行 babel-preset-es2015，现在官方推荐使用的是 babel-preset-env,那我们为了紧跟潮流，我们在讲一下 env 的配置方法。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v(" npm i --save-dev babel-preset-env")])]),s._v(" "),e("p",[s._v("然后修改.babelrc 里的配置文件。其实只要把之前的 es2015 换成 env 就可以了。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('{\n  "presets": [\n    "env",\n    "react"\n  ]\n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"webpack-模块化配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-模块化配置","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark15"}}),s._v(" webpack 模块化配置")]),s._v(" "),e("p",[s._v("webpack 模块")]),s._v(" "),e("p",[s._v("为了让大家容易看懂，我把 webpack.config.js 中的 entry 入口文件进行模块化设置，单独拿出来制作成一个模块。")]),s._v(" "),e("p",[s._v("首先在根目录，新建一个 webpack_config 文件夹，然后新建 entry_webpack.js 文件，代码如下：")]),s._v(" "),e("p",[s._v("entry_webpack.js")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/声明entry变量\nconst entry ={};\n//声明路径属性\nentry.path={\n    entry:'./src/entry.js'\n}\n//进行模块化\nmodule.exports =entry;\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("配置的模块化代码编写好以后，需要在 webpack.config.js 中引入，注意这里的引入只能使用 require 的方法。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01")]),s._v(' const entry = require("./webpack_config/entry_webpack.js")')])]),s._v(" "),e("p",[s._v("然后在入口文件部分，修改成如下代码：")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("02.")]),s._v(" entry:entry.path")])]),s._v(" "),e("h2",{attrs:{id:"优雅打包第三方类库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优雅打包第三方类库","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark16"}}),s._v("优雅打包第三方类库")]),s._v(" "),e("p",[s._v("引入 JQuery")]),s._v(" "),e("p",[s._v("其实引用第三方库的方法有很多种，但是有些并不是很优雅，还有些方法会出现打包问题，技术胖在这里介绍一下自己工作中引入第三方模块的方法，我们就拿 JQuery 为例。小伙伴们要举一反三，学会后试着自己引入 Vue 试试。")]),s._v(" "),e("p",[s._v("安装 JQuery")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("npm i jquery -D\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("用 plugin 引入\nProvidePlugin 是一个 webpack 自带的插件，Provide 的意思就是装备、提供。因为 ProvidePlugin 是 webpack 自带的插件，所以要先再 webpack.config.js 中引入 webpack。")]),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("01.")]),s._v(" constc webpack = require('webpack');")])]),s._v(" "),e("p",[s._v("引入成功后配置我们的 plugins 模块，代码如下。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('plugins:[\n    new webpack.ProvidePlugin({\n        $:"jquery"\n    })\n]\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("配置好后，就可以在你的入口文件中使用了，而不用再次引入了。这是一种全局的引入，在实际工作中也可以很好的规范项目所使用的第三方库。")]),s._v(" "),e("h2",{attrs:{id:"watch-的正确使用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch-的正确使用方法","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark17"}}),s._v("watch 的正确使用方法")]),s._v(" "),e("p",[s._v("初级开发阶段，使用 webpack-dev-server 就可以充当服务器和完成打包任务，但时随着你项目的进一步完成，可能需要前后台联调或者两个前端合并代码时，就需要一个公共的服务器了。这时候我们每次保存后手动打包显然效率太低，我们希望的场景是代码发生变化后，只要保存，webpack 自动为我们进行打包。这个工具就是 watch，这节课我们把 wacht 完全学会，你会发现在开发中更加的得心应手。")]),s._v(" "),e("h3",{attrs:{id:"watch-的配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#watch-的配置","aria-hidden":"true"}},[s._v("#")]),s._v(" watch 的配置")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("watchOptions:{\n    //检测修改的时间，以毫秒为单位\n    poll:1000,\n    //防止重复保存而发生重复编译错误。这里设置的500是半秒内重复保存，不进行打包操作\n    aggregateTimeout:500,\n    //不监听的目录\n    ignored:/node_modules/,\n}\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("这样就不用反复打包")]),s._v(" "),e("h3",{attrs:{id:"bannerplugin-插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bannerplugin-插件","aria-hidden":"true"}},[s._v("#")]),s._v(" BannerPlugin 插件")]),s._v(" "),e("p",[s._v("这个插件是用来在打包时，在打包后的代码上加上自己的备注")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new webpack.BannerPlugin('余俊打包后的项目')\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"webpack-优化黑技能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化黑技能","aria-hidden":"true"}},[s._v("#")]),s._v(" "),e("div",{attrs:{id:"mark18"}}),s._v("webpack 优化黑技能")]),s._v(" "),e("h3",{attrs:{id:"抽离第三方库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽离第三方库","aria-hidden":"true"}},[s._v("#")]),s._v(" 抽离第三方库")]),s._v(" "),e("p",[e("strong",[s._v("第一步：修改入口文件")])]),s._v(" "),e("p",[s._v("抽离的第一步是修改入口文件，把我们的 JQuery 也加入到入口文件中，看下面的代码。")]),s._v(" "),e("p",[s._v("webpack.config.js")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("entry:{\n        entry:'./src/entry.js',\n        jquery:'jquery'\n }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("第二步：引入插件")])]),s._v(" "),e("p",[s._v("我们需要引入 optimize 优化插件，插件里边是需要配置的，具体配置项看下面的代码。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new webpack.optimize.CommonsChunkPlugin({\n    //name对应入口文件中的名字，我们起的是jQuery\n    name:['jquery'],\n    //把文件打包到哪里，是一个路径\n    filename:\"assets/js/[name].js\",\n    //最小打包的文件模块数，这里直接写2就好\n    minChunks:2\n}),\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("配置好后，我们就可以在控制台输入 webpack 进行打包了。你会看到我们预想的结果，jquery 和 vue 都被我们抽离出来了")]),s._v(" "),e("h2",{attrs:{id:"静态资源集中输出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源集中输出","aria-hidden":"true"}},[s._v("#")]),s._v(" 静态资源集中输出")]),s._v(" "),e("p",[s._v("工作中会有一些已经存在但在项目中没有引用的图片资源或者其他静态资源（比如设计图、开发文档），这些静态资源有可能是文档，也有可能是一些额外的图片。这些资料可能要保存在服务器。")]),s._v(" "),e("h3",{attrs:{id:"插件安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件安装","aria-hidden":"true"}},[s._v("#")]),s._v(" 插件安装")]),s._v(" "),e("blockquote",[e("p",[s._v("npm install --save-dev copy-webpack-plugin")])]),s._v(" "),e("h3",{attrs:{id:"引入插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入插件","aria-hidden":"true"}},[s._v("#")]),s._v(" 引入插件")]),s._v(" "),e("p",[s._v("安装好后，需要在 webpack.config.js 文件的头部引入这个插件才可以使用。")]),s._v(" "),e("blockquote",[e("p",[s._v('const copyWebpackPlugin= require("copy-webpack-plugin")')])]),s._v(" "),e("h3",{attrs:{id:"配置插件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置插件","aria-hidden":"true"}},[s._v("#")]),s._v(" 配置插件")]),s._v(" "),e("p",[s._v("引入之后我们就可以在 plugins 里边进行配置插件了，我们先看下面的插件配置代码，然后再进行详细讲解。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new copyWebpackPlugin([{\n        from:__dirname+'/src/public',\n        to:'./public'\n    }])\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("from:要打包的静态资源目录地址，这里的__dirname 是指项目目录下，是 node 的一种语法，可以直接定位到本机的项目目录中。")]),s._v(" "),e("li",[s._v("to:要打包到的文件夹路径，跟随 output 配置中的目录。所以不需要再自己加__dirname。")])]),s._v(" "),e("h3",{attrs:{id:"说说热更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说热更新","aria-hidden":"true"}},[s._v("#")]),s._v(" 说说热更新")]),s._v(" "),e("p",[s._v("其实在 webpack3 中启用热加载相当的容易，只要加入 HotModuleReplacementPlugin 这个插件就可以了。")]),s._v(" "),e("blockquote",[e("p",[s._v("new webpack.HotModuleReplacementPlugin()")])]),s._v(" "),e("p",[s._v("本文链接："),e("a",{attrs:{href:"http://yujun96.top",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://yujun96.top"),e("OutboundLink")],1)]),s._v(" "),e("center",[s._v("文章到底了")])],1)},[],!1,null,null,null);a.default=t.exports}}]);